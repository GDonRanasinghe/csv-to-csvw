name: Generate CSV-W from csv upload to repository.

on:
  push:
    branches:
      - main
    paths:
      - "csv/**"
      - "*.csv"
      - "*.json"

jobs:
  generate_csvw_from_csv_upload:
    name: Generate CSV-W from csv upload
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install csvcubed
        run: pip install csvcubed

      - name: Verify csvcubed installation
        run: csvcubed version

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: View working directory
        run: | 
          ls -la "${GITHUB_WORKSPACE}/.github"
          run: ls -la "${GITHUB_WORKSPACE}/.github/scripts/"

      - name: Get all added/changed files inside csv folder
        id: get-added-changed-files
        uses: jitterbit/get-changed-files@v1
        with:
          format: "csv"

      - name: Process all added/changed files inside csv folder
        id: process-files
        run: |
          echo "::set-output name=has_outputs::${{ toJSON(false) }}"
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get-added-changed-files.outputs.added_modified }}')

          chmod +x "${GITHUB_WORKSPACE}/.github/scripts/generate_csvws.sh"
          "${GITHUB_WORKSPACE}/.github/scripts/generate_csvws.sh ${added_modified_files}"

      - name: Commit generated CSV-Ws and logs to the repository
        if: ${{ fromJSON(steps.process-files.outputs.has_outputs) == true }}
        run: |
          echo $'\nCommitting CSV-Ws\n'
          git config --global user.name "CSV-W from csv upload generator"
          git pull
          git add out/
          git commit -m "CSV-Ws generated from csv upload - $(date +'%d-%m-%Y at %H:%M:%S')"
          git push

      - name: Publish CSV-Ws and logs to artefacts
        if: ${{ fromJSON(steps.process-files.outputs.has_outputs) == true }}
        uses: actions/upload-artifact@v2
        with:
          name: assets-for-download
          path: out

      - name: Publish CSV-Ws and logs to GitHub Pages
        if: ${{ fromJSON(steps.process-files.outputs.has_outputs) == true }}
        run: |
          echo $'\n'
          echo "Publishing to GitHub Pages"
          git checkout -b gh-pages
          rm -r csv
          rm -r LICENSE
          rm -r README.md
          rm -r .github/workflows

          repo_name=${{ github.repository  }}    
          commit_id=${{ github.sha }}      
          mapfile -d ',' -t out_files < <(printf '%s,' $(find . -type f -path '*out/*'))
          processed_out_files=$(printf ",%s" "${out_files[@]}")

          touch .nojekyll
          touch index.html

          cat > index.html <<EOL
          <!doctype html>
          <html>
            <head>
            </head>
            <body>
              <h3>CSV-Ws generated are as below. The latest commit id is ${commit_id}.</h3>
              <div id="files-container"></div>
              <script type="text/javascript">
                var html_str = "<ul>";
                var files = "${processed_out_files}".split(',');
                files.shift()
                files.forEach(function(file) {
                  file = file.replace("./","")
                  link = "https://raw.githubusercontent.com/${repo_name}/gh-pages/"+file
                  html_str += "<li>"+"<a href='"+ link + "'>"+file+"</a></li>";
                });
                html_str += "</ul>";
                document.getElementById("files-container").innerHTML = html_str;
              </script>
            </body>
          </html>
          EOL

          git add .nojekyll
          git add index.html
          git commit -a -m "Updating outputs in GitHub Pages - $(date +'%d-%m-%Y at %H:%M:%S')"
          git push --set-upstream origin gh-pages -f
