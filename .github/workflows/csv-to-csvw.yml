name: Generate CSV-W from csv upload to repository.

on:
  push:
    branches:
      - main
    paths:
      - "csv/**"
      - "*.csv"
      - "*.json"

jobs:
  generate_csvw_from_csv_upload:
    name: Generate CSV-W from csv upload
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install csvcubed
        run: pip install csvcubed

      - name: Verify csvcubed installation
        run: csvcubed version

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: View working directory
        run: ls -la $GITHUB_WORKSPACE

      - name: Get all added/changed files inside csv folder
        id: get-added-changed-files
        uses: jitterbit/get-changed-files@v1
        with:
          format: "csv"

      - name: Process all added/changed files inside csv folder
        id: process-files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get-added-changed-files.outputs.added_modified }}')
          for file in "${added_modified_files[@]}"; do
            file_path="${file%.*}"
            file_name="${file_path##*/}"
            file_extension="${file##*.}"
            out_path="out/${file_path#csv/}/"

            if [[ "$file_extension" == "csv" ]]; then
              echo $'\n'
              echo "Processing file ${file}"
              echo "Output path is ${out_path}"

              csv_file=${file}
              for file_secondary in "${added_modified_files[@]}"; do
                file_secondary_name="${file_secondary%.*}"
                file_secondary_extension="${file_secondary##*.}"
                if [[ "${file_secondary_name}.${file_secondary_extension}" == "${file_path}.csv.json" ]]; then
                  config_file="${file}.json"
                fi
              done
              
              if [[ -z $config_file ]]; then
                echo "Config for ${csv_file} is not available"
                echo "Building CSV-W"
                csvcubed build ${csv_file} --out $out_path
              else
                echo "Config for ${csv_file} is available: ${config_file}"
                echo "Building CSV-W"
                csvcubed build ${csv_file} -c $config_file --out $out_path
              fi
              
              echo "Inspecting CSV-W"
              csvcubed inspect "${GITHUB_WORKSPACE}/${out_path}${file_name//[ ,_]/-}.${file_extension}-metadata.json" >> "${out_path}inspect_output.txt"
              
              unset config_file
              echo "Finished processing file ${file}"
              echo "::set-output name=has_outputs::${{ toJSON(true) }}"
            fi
          done

      - name: Commit generated CSV-Ws and logs to the repository
        if: ${{ fromJSON(steps.process-files.outputs.has_outputs) == true }}
        run: |
          echo $'\nCommitting CSV-Ws\n'
          git config --global user.name "CSV-W from csv upload generator"
          git pull
          git add out/
          git commit -m "CSV-Ws generated from csv upload - $(date +'%d-%m-%Y at %H:%M:%S')"
          git push

      - name: Publish CSV-Ws and logs to artefacts
        if: ${{ fromJSON(steps.process-files.outputs.has_outputs) == true }}
        uses: actions/upload-artifact@v2
        with:
          name: assets-for-download
          path: out

      - name: Publish CSV-Ws and logs to GitHub Pages
        if: ${{ fromJSON(steps.process-files.outputs.has_outputs) == true }}
        run: |
          echo $'\n'
          echo "Publishing to GitHub Pages"
          git checkout -b gh-pages
          rm -r csv
          rm -r LICENSE
          rm -r README.md
          rm -r .github/workflows

          repo_name=${{ github.repository  }}    
          commit_id=${{ github.sha }}      
          mapfile -d $'\0' out_files < <(find . -type f -path '*out/*' -print0)
          echo "${out_files}"

          touch .nojekyll
          touch index.html

          cat > index.html <<EOL
          <!doctype html>
          <html>
            <head>
            </head>
            <body>
              <h3>CSV-Ws generated for the commit with id ${commit_id}</h3>
              <div id="files-container"></div>
              <script type="text/javascript">
                var str = '<ul>';
                ${out_files}.forEach(function(file) {
                  str += '<li><a href="https://raw.githubusercontent.com/${repo_name}/gh-pages/out/csv_in_folder/csv_in_sub_folder/csv_with_config_in_sub_sub_folder/csv_with_config/csv-with-config.csv">'+file+'</a></li>';
                });
                str += '</ul>';
                document.getElementById("files-container").innerHTML = str;
              </script>
            </body>
          </html>
          EOL

          git add .nojekyll
          git add index.html
          git commit -a -m "Updating outputs in GitHub Pages - $(date +'%d-%m-%Y at %H:%M:%S')"
          git push --set-upstream origin gh-pages -f
